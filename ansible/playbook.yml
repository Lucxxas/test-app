---
- name: Setup from environment variables
  hosts: localhost
  gather_facts: yes
  connection: local
  tasks:
    - name: Read values from files created by hook
      slurp:
        src: "{{ item.file }}"
      register: ip_files
      loop:
        - { name: "web_ip", file: "/tmp/web_ip.txt" }
        - { name: "app_ip", file: "/tmp/app_ip.txt" }
        - { name: "db_endpoint", file: "/tmp/db_endpoint.txt" }

    - name: Set facts from file content
      set_fact:
        web_ip: "{{ (ip_files.results | selectattr('item.name', 'equalto', 'web_ip') | first).content | b64decode | trim }}"
        app_ip: "{{ (ip_files.results | selectattr('item.name', 'equalto', 'app_ip') | first).content | b64decode | trim }}"
        db_endpoint: "{{ (ip_files.results | selectattr('item.name', 'equalto', 'db_endpoint') | first).content | b64decode | trim }}"

    - name: Add hosts to inventory
      add_host:
        name: "{{ item.name }}"
        ansible_host: "{{ item.ip }}"
        groups: "{{ item.group }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: /tmp/ssh_key.pem
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      loop:
        - { name: "web_server", ip: "{{ web_ip }}", group: "web" }
        - { name: "app_server", ip: "{{ app_ip }}", group: "app" }

- name: Configuration Simple 3-Tier
  hosts: web,app
  become: yes
  vars:
    app_server_ip: "{{ hostvars['app_server']['ansible_host'] }}"
    database_endpoint: "{{ hostvars['localhost']['db_endpoint'] }}"

  tasks:
    - name: Update package cache
      apt:
        update_cache: yes

    - name: Install base packages
      package:
        name:
          - curl
          - git
          - htop
        state: present

- name: Configuration 3-Tier AWS (Web + App tiers)
  hosts: all
  become: yes
  become_method: sudo
  vars:
    repo_url: https://github.com/aws-samples/aws-three-tier-web-architecture-workshop.git
    dest_dir: /tmp/aws-three-tier
    app_port: 4000
    web_tier_path: "{{ dest_dir }}/application-code/web-tier"
    app_tier_path: "{{ dest_dir }}/application-code/app-tier"

  tasks:
    # ======================
    # CONFIGURATION COMMUNE
    # ======================
    - name: Installer les paquets de base
      ansible.builtin.package:
        name:
          - git
          - curl
          - unzip
          - htop
        state: present

    - name: Créer l'utilisateur pour l'application
      ansible.builtin.user:
        name: appuser
        shell: /bin/bash
        home: /home/appuser
        create_home: yes

    - name: Créer l'utilisateur admin
      ansible.builtin.user:
        name: admin
        shell: /bin/bash
        home: /home/admin
        create_home: yes

    - name: Cloner le repository AWS 3-tier
      ansible.builtin.git:
        repo: "{{ repo_url }}"
        dest: "{{ dest_dir }}"
        version: main
        force: yes

    - name: Vérifier la structure du repository
      ansible.builtin.find:
        paths: "{{ dest_dir }}"
        file_type: directory
        recurse: no
      register: repo_structure

    - name: Afficher la structure du repository
      ansible.builtin.debug:
        var: repo_structure.files

    - name: Ajuster les permissions du dossier
      ansible.builtin.file:
        path: "{{ dest_dir }}"
        owner: appuser
        group: appuser
        recurse: yes

    # =================
    # TIER WEB (NGINX)
    # =================
    - block:
      - name: Installer Nginx
        ansible.builtin.package:
          name: nginx
          state: present

      - name: Installer Node.js et npm pour build React
        ansible.builtin.shell: |
          curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
          yum install -y nodejs
        when: ansible_os_family == "RedHat"

      - name: Installer Node.js et npm (Ubuntu/Debian)
        ansible.builtin.package:
          name:
            - nodejs
            - npm
          state: present
        when: ansible_os_family == "Debian"

      # Fix: Ensure environment is refreshed after Node.js installation
      - name: Refresh environment after Node.js installation
        ansible.builtin.shell: hash -r
        when: ansible_os_family == "Debian"

      - name: Créer le dossier build pour React
        ansible.builtin.file:
          path: /home/admin/web-tier
          state: directory
          owner: admin
          group: admin
          mode: '0755'

      # Fix: Check if the source directory exists before trying operations
      - name: Check if web-tier source exists
        ansible.builtin.stat:
          path: "{{ web_tier_path }}"
        register: web_tier_check

      - name: Installer les dépendances React
        ansible.builtin.shell: |
          cd {{ web_tier_path }}
          npm install
        when: web_tier_check.stat.exists

      - name: Construire l'application React
        ansible.builtin.shell: |
          cd {{ web_tier_path }}
          npm run build
        when: web_tier_check.stat.exists

      - name: Check if build directory was created
        ansible.builtin.stat:
          path: "{{ web_tier_path }}/build"
        register: build_check

      - name: Copier les fichiers build vers le dossier web
        ansible.builtin.copy:
          src: "{{ web_tier_path }}/build/"
          dest: /home/admin/web-tier/build/
          remote_src: yes
          owner: admin
          group: admin
          mode: '0755'
        when: build_check.stat.exists

      - name: Create basic index.html if build failed
        ansible.builtin.copy:
          content: |
            <!DOCTYPE html>
            <html>
            <head>
                <title>Three Tier App</title>
            </head>
            <body>
                <h1>Welcome to Three Tier Application</h1>
                <p>Web tier is running!</p>
            </body>
            </html>
          dest: /home/admin/web-tier/index.html
          owner: admin
          group: admin
          mode: '0644'
        when: not build_check.stat.exists

      - name: Configurer Nginx avec une configuration basique
        ansible.builtin.copy:
          content: |
            user www-data;
            worker_processes auto;
            pid /run/nginx.pid;

            events {
                worker_connections 768;
            }

            http {
                sendfile on;
                tcp_nopush on;
                tcp_nodelay on;
                keepalive_timeout 65;
                types_hash_max_size 2048;

                include /etc/nginx/mime.types;
                default_type application/octet-stream;

                access_log /var/log/nginx/access.log;
                error_log /var/log/nginx/error.log;

                gzip on;

                server {
                    listen 80 default_server;
                    listen [::]:80 default_server;

                    root /home/admin/web-tier;
                    index index.html index.htm;

                    server_name _;

                    location / {
                        try_files $uri $uri/ =404;
                    }
                }
            }
          dest: /etc/nginx/nginx.conf
          backup: yes
        notify: restart nginx

      - name: Corriger les permissions pour nginx - dossiers parents
        ansible.builtin.file:
          path: "{{ item }}"
          mode: 'o+x'
        loop:
          - /home
          - /home/admin

      - name: Corriger les permissions pour nginx - dossier web-tier
        ansible.builtin.file:
          path: /home/admin/web-tier
          mode: 'o+rX'
          recurse: yes

      - name: Démarrer et activer Nginx
        ansible.builtin.service:
          name: nginx
          state: started
          enabled: yes

      when: "'web' in group_names"

    # ========================
    # TIER APPLICATION (NODE)
    # ========================
    - block:
      - name: Installer Node.js et npm pour app tier
        ansible.builtin.shell: |
          curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
          yum install -y nodejs
        when: ansible_os_family == "RedHat"

      - name: Installer Node.js et npm (Ubuntu/Debian)
        ansible.builtin.package:
          name:
            - nodejs
            - npm
          state: present
        when: ansible_os_family == "Debian"

      # Fix: Ensure npm is available and refresh the environment
      - name: Wait for npm to be available and refresh environment
        ansible.builtin.shell: |
          hash -r
          which npm
          npm --version
        register: npm_check
        retries: 3
        delay: 5
        until: npm_check.rc == 0

      - name: Display npm version
        ansible.builtin.debug:
          var: npm_check.stdout_lines

      - name: Installer PM2 globalement avec chemin complet
        ansible.builtin.shell: |
          export PATH="/usr/bin:$PATH"
          /usr/bin/npm install -g pm2
        environment:
          PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

      - name: Vérifier l'installation de PM2
        ansible.builtin.shell: |
          export PATH="/usr/local/bin:/usr/bin:$PATH"
          which pm2 && pm2 --version
        register: pm2_check
        environment:
          PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

      - name: Display PM2 installation status
        ansible.builtin.debug:
          var: pm2_check.stdout_lines

      - name: Vérifier le contenu du dossier app-tier
        ansible.builtin.find:
          paths: "{{ dest_dir }}/application-code/app-tier"
          patterns: "*"
        register: app_tier_files

      - name: Afficher les fichiers trouvés
        ansible.builtin.debug:
          var: app_tier_files.files

      - name: Check if app-tier package.json exists
        ansible.builtin.stat:
          path: "{{ dest_dir }}/application-code/app-tier/package.json"
        register: package_json_check

      - name: Installer les dépendances de l'application
        ansible.builtin.shell: |
          cd {{ dest_dir }}/application-code/app-tier
          export PATH="/usr/bin:$PATH"
          /usr/bin/npm install
        environment:
          PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        when: package_json_check.stat.exists

      - name: Arrêter les anciens processus PM2
        ansible.builtin.shell: |
          export PATH="/usr/local/bin:/usr/bin:$PATH"
          pm2 kill || true
        environment:
          PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        ignore_errors: yes

      - name: Check if app entry point exists
        ansible.builtin.stat:
          path: "{{ dest_dir }}/application-code/app-tier/index.js"
        register: app_entry_check

      - name: Démarrer l'application avec PM2
        ansible.builtin.shell: |
          cd {{ dest_dir }}/application-code/app-tier
          export PATH="/usr/local/bin:/usr/bin:$PATH"
          pm2 start index.js --name "three-tier-app"
          pm2 save
        environment:
          PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        when: app_entry_check.stat.exists

      - name: Configurer PM2 au démarrage
        ansible.builtin.shell: |
          export PATH="/usr/local/bin:/usr/bin:$PATH"
          pm2 startup || true
          pm2 save || true
        environment:
          PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        ignore_errors: yes

      when: "'app' in group_names"

  handlers:
    - name: restart nginx
      ansible.builtin.service:
        name: nginx
        state: restarted
