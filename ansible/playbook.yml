---
- name: Setup from environment variables
  hosts: localhost
  gather_facts: yes
  connection: local
  tasks:
    - name: Read values from files created by hook
      slurp:
        src: "{{ item.file }}"
      register: ip_files
      loop:
        - { name: "web_ip", file: "/tmp/web_ip.txt" }
        - { name: "app_ip", file: "/tmp/app_ip.txt" }
        - { name: "db_endpoint", file: "/tmp/db_endpoint.txt" }

    - name: Set facts from file content
      set_fact:
        web_ip: "{{ (ip_files.results | selectattr('item.name', 'equalto', 'web_ip') | first).content | b64decode | trim }}"
        app_ip: "{{ (ip_files.results | selectattr('item.name', 'equalto', 'app_ip') | first).content | b64decode | trim }}"
        db_endpoint: "{{ (ip_files.results | selectattr('item.name', 'equalto', 'db_endpoint') | first).content | b64decode | trim }}"

    - name: Add hosts to inventory
      add_host:
        name: "{{ item.name }}"
        ansible_host: "{{ item.ip }}"
        groups: "{{ item.group }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: /tmp/ssh_key.pem
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      loop:
        - { name: "web_server", ip: "{{ web_ip }}", group: "web" }
        - { name: "app_server", ip: "{{ app_ip }}", group: "app" }

- name: Configuration Simple 3-Tier
  hosts: web,app
  become: yes
  vars:
    app_server_ip: "{{ hostvars['app_server']['ansible_host'] }}"
    database_endpoint: "{{ hostvars['localhost']['db_endpoint'] }}"

  tasks:
    - name: Update package cache
      apt:
        update_cache: yes

    - name: Install base packages
      package:
        name:
          - curl
          - git
          - htop
        state: present

    # =================
    # WEB TIER (NGINX)
    # =================
    - block:
      - name: Install Nginx
        package:
          name: nginx
          state: present

      - name: Create simple web page
        copy:
          content: |
            <!DOCTYPE html>
            <html>
            <head>
                <title>AWS 3-Tier Architecture</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; background: #f0f0f0; }
                    .container { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                    h1 { color: #FF9900; }
                    .status { background: #d4edda; padding: 15px; border-radius: 4px; margin: 20px 0; }
                    button { background: #FF9900; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }
                    #result { margin-top: 20px; padding: 10px; background: #f8f9fa; border-radius: 4px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>üöÄ AWS 3-Tier Architecture</h1>
                    <div class="status">
                        ‚úÖ <strong>Web Tier</strong> - Running successfully!
                    </div>
                    
                    <h2>Test API Connection</h2>
                    <button onclick="testAPI()">Test App Tier Connection</button>
                    <div id="result"></div>
                    
                    <h2>Architecture Components</h2>
                    <ul>
                        <li><strong>Web Tier:</strong> Nginx serving this page</li>
                        <li><strong>App Tier:</strong> Node.js API server</li>
                        <li><strong>Database Tier:</strong> MySQL RDS</li>
                    </ul>
                </div>
                
                <script>
                function testAPI() {
                    const result = document.getElementById('result');
                    result.innerHTML = 'Testing connection...';
                    
                    fetch('/api/health')
                        .then(response => response.json())
                        .then(data => {
                            result.innerHTML = `<strong>‚úÖ Success!</strong> ${JSON.stringify(data, null, 2)}`;
                        })
                        .catch(error => {
                            result.innerHTML = `<strong>‚ùå Error:</strong> ${error.message}`;
                        });
                }
                </script>
            </body>
            </html>
          dest: /var/www/html/index.html

      - name: Configure Nginx
        copy:
          content: |
            server {
                listen 80 default_server;
                listen [::]:80 default_server;
                
                root /var/www/html;
                index index.html;
                server_name _;
                
                # Health check
                location /health {
                    return 200 "Web Tier OK\n";
                    add_header Content-Type text/plain;
                }
                
                # Serve static files
                location / {
                    try_files $uri $uri/ =404;
                }
                
                # Proxy API requests to app server
                location /api/ {
                    proxy_pass http://{{ app_server_ip }}:3000/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
          dest: /etc/nginx/sites-available/default

      - name: Start and enable Nginx
        service:
          name: nginx
          state: restarted
          enabled: yes

      when: "'web' in group_names"

    # ========================
    # APP TIER (NODE.JS)
    # ========================
    - block:
      - name: Install Node.js
        shell: |
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs

      - name: Create app directory
        file:
          path: /opt/app
          state: directory
          mode: '0755'

      - name: Create simple Node.js app
        copy:
          content: |
            const express = require('express');
            const mysql = require('mysql2');
            const app = express();
            const PORT = 3000;

            app.use(express.json());

            // Database connection
            const db = mysql.createConnection({
                host: '{{ database_endpoint.split(":")[0] }}',
                user: 'admin',
                password: 'Password123!',
                database: 'webappdb'
            });

            // Health check endpoint
            app.get('/health', (req, res) => {
                res.json({
                    status: 'OK',
                    message: 'App Tier is running',
                    timestamp: new Date().toISOString()
                });
            });

            // Test database connection
            app.get('/db-test', (req, res) => {
                db.ping((err) => {
                    if (err) {
                        res.status(500).json({ error: 'Database connection failed', details: err.message });
                    } else {
                        res.json({ message: 'Database connection successful' });
                    }
                });
            });

            // Simple API endpoint
            app.get('/api/status', (req, res) => {
                res.json({
                    service: 'AWS 3-Tier App',
                    version: '1.0.0',
                    status: 'running'
                });
            });

            app.listen(PORT, '0.0.0.0', () => {
                console.log(`App tier running on port ${PORT}`);
            });
          dest: /opt/app/server.js

      - name: Create package.json
        copy:
          content: |
            {
              "name": "aws-3tier-app",
              "version": "1.0.0",
              "description": "Simple 3-tier app",
              "main": "server.js",
              "scripts": {
                "start": "node server.js"
              },
              "dependencies": {
                "express": "^4.18.2",
                "mysql2": "^3.2.0"
              }
            }
          dest: /opt/app/package.json

      - name: Install Node.js dependencies
        shell: |
          cd /opt/app
          npm install

      - name: Create systemd service for app
        copy:
          content: |
            [Unit]
            Description=AWS 3-Tier App
            After=network.target

            [Service]
            Type=simple
            User=www-data
            WorkingDirectory=/opt/app
            ExecStart=/usr/bin/node server.js
            Restart=always
            RestartSec=10

            [Install]
            WantedBy=multi-user.target
          dest: /etc/systemd/system/aws-3tier-app.service

      - name: Start and enable app service
        systemd:
          name: aws-3tier-app
          state: restarted
          enabled: yes
          daemon_reload: yes

      when: "'app' in group_names"
