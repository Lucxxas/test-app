---
# Play 1: Setup depuis les variables d'environnement Spacelift
- name: Setup from environment variables
  hosts: localhost
  gather_facts: yes
  connection: local
  tasks:
    - name: Debug - Show all environment variables starting with TF_VAR
      debug:
        msg: "{{ item }}"
      loop: "{{ ansible_env | dict2items | selectattr('key', 'match', 'TF_VAR_.*') | list }}"
      when: ansible_env is defined

    - name: Get IPs from environment variables
      set_fact:
        web_ip: "{{ lookup('env', 'TF_VAR_web_instance_ip') }}"
        app_ip: "{{ lookup('env', 'TF_VAR_app_instance_ip') }}"
        db_endpoint: "{{ lookup('env', 'TF_VAR_database_endpoint') }}"

    - name: Debug - Show retrieved values
      debug:
        msg:
          - "WEB_IP: {{ web_ip }}"
          - "APP_IP: {{ app_ip }}"
          - "DB_ENDPOINT: {{ db_endpoint }}"

    - name: Fail if variables are empty
      fail:
        msg: "Environment variables are empty. Check Spacelift output references."
      when: web_ip == "" or app_ip == "" or db_endpoint == ""

    - name: Get SSH key from environment variable
      copy:
        content: "{{ lookup('env', 'TF_VAR_ssh_private_key') }}"
        dest: /tmp/ssh_key.pem
        mode: '0600'
      when: lookup('env', 'TF_VAR_ssh_private_key') != ""

    - name: Fallback - Get SSH key from SSM Parameter Store
      shell: |
        aws ssm get-parameter --name "/ssh/TP-FINAL-keypair/private" --with-decryption --query 'Parameter.Value' --output text > /tmp/ssh_key.pem
        chmod 600 /tmp/ssh_key.pem
      environment:
        AWS_DEFAULT_REGION: us-east-1
      check_mode: no
      when: lookup('env', 'TF_VAR_ssh_private_key') == ""

    - name: Add hosts to inventory
      add_host:
        name: "{{ item.name }}"
        ansible_host: "{{ item.ip }}"
        groups: "{{ item.group }}"
        ansible_user: ec2-user
        ansible_ssh_private_key_file: /tmp/ssh_key.pem
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      loop:
        - { name: "web_server", ip: "{{ web_ip }}", group: "web" }
        - { name: "app_server", ip: "{{ app_ip }}", group: "app" }

# Play 2: Configuration 3-Tier AWS (Web + App tiers)
- name: Configuration 3-Tier AWS (Web + App tiers)
  hosts: web,app
  become: yes
  become_method: sudo
  vars:
    repo_url: https://github.com/aws-samples/aws-three-tier-web-architecture-workshop.git
    dest_dir: /opt/aws-three-tier
    app_port: 4000
    web_tier_path: "{{ dest_dir }}/application-code/web-tier"
    app_tier_path: "{{ dest_dir }}/application-code/app-tier"
    app_server_ip: "{{ hostvars['app_server']['ansible_host'] }}"
    database_endpoint: "{{ hostvars['localhost']['db_endpoint'] }}"
    database_name: "webappdb"
    database_user: "admin"
    database_password: "Password123!"

  tasks:
    # ======================
    # CONFIGURATION COMMUNE
    # ======================
    - name: Attendre que les instances soient prêtes
      wait_for_connection:
        delay: 10
        timeout: 300

    - name: Installer les paquets de base
      ansible.builtin.package:
        name:
          - git
          - curl
          - unzip
          - htop
          - python3
          - python3-pip
        state: present

    - name: Créer l'utilisateur pour l'application
      ansible.builtin.user:
        name: appuser
        shell: /bin/bash
        home: /home/appuser
        create_home: yes

    - name: Créer l'utilisateur admin
      ansible.builtin.user:
        name: admin
        shell: /bin/bash
        home: /home/admin
        create_home: yes

    - name: Cloner le repository AWS 3-tier
      ansible.builtin.git:
        repo: "{{ repo_url }}"
        dest: "{{ dest_dir }}"
        version: main
        force: yes

    - name: Ajuster les permissions du dossier
      ansible.builtin.file:
        path: "{{ dest_dir }}"
        owner: appuser
        group: appuser
        recurse: yes

    # =================
    # TIER WEB (NGINX)
    # =================
    - block:
      - name: Installer Nginx
        ansible.builtin.package:
          name: nginx
          state: present

      - name: Installer Node.js et npm pour build React (RedHat/CentOS/Amazon Linux)
        ansible.builtin.shell: |
          curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
          yum install -y nodejs
        when: ansible_os_family == "RedHat"

      - name: Installer Node.js et npm (Ubuntu/Debian)
        ansible.builtin.package:
          name:
            - nodejs
            - npm
          state: present
        when: ansible_os_family == "Debian"

      - name: Créer le dossier build pour React
        ansible.builtin.file:
          path: /home/admin/web-tier
          state: directory
          owner: admin
          group: admin
          mode: '0755'

      - name: Vérifier l'existence du dossier web-tier
        ansible.builtin.stat:
          path: "{{ web_tier_path }}"
        register: web_tier_dir

      - name: Installer les dépendances React
        ansible.builtin.shell: |
          cd {{ web_tier_path }}
          npm install --production
        when: web_tier_dir.stat.exists

      - name: Construire l'application React
        ansible.builtin.shell: |
          cd {{ web_tier_path }}
          npm run build
        when: web_tier_dir.stat.exists

      - name: Copier les fichiers build vers le dossier web
        ansible.builtin.copy:
          src: "{{ web_tier_path }}/build/"
          dest: /home/admin/web-tier/build/
          remote_src: yes
          owner: admin
          group: admin
          mode: '0755'
        when: web_tier_dir.stat.exists

      - name: Create nginx configuration
        copy:
          content: |
            events { worker_connections 1024; }
            http {
                include /etc/nginx/mime.types;
                default_type application/octet-stream;
                server {
                    listen 80;
                    location / {
                        root /home/admin/web-tier/build;
                        try_files $uri $uri/ /index.html;
                    }
                    location /api/ {
                        proxy_pass http://{{ app_server_ip }}:4000/;
                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    }
                }
            }
          dest: /etc/nginx/nginx.conf
          backup: yes
        notify: restart nginx

      - name: Corriger les permissions pour nginx - dossiers parents
        ansible.builtin.file:
          path: "{{ item }}"
          mode: 'o+x'
        loop:
          - /home
          - /home/admin

      - name: Corriger les permissions pour nginx - dossier web-tier
        ansible.builtin.file:
          path: /home/admin/web-tier/build
          mode: 'o+rX'
          recurse: yes

      - name: Démarrer et activer Nginx
        ansible.builtin.service:
          name: nginx
          state: started
          enabled: yes

      when: "'web' in group_names"

    # ========================
    # TIER APPLICATION (NODE)
    # ========================
    - block:
      - name: Installer Node.js et npm pour app tier (RedHat/CentOS/Amazon Linux)
        ansible.builtin.shell: |
          curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
          yum install -y nodejs
        when: ansible_os_family == "RedHat"

      - name: Installer Node.js et npm (Ubuntu/Debian)
        ansible.builtin.package:
          name:
            - nodejs
            - npm
          state: present
        when: ansible_os_family == "Debian"

      - name: Installer PM2 globalement
        ansible.builtin.npm:
          name: pm2
          global: yes

      - name: Vérifier l'existence du dossier app-tier
        ansible.builtin.stat:
          path: "{{ app_tier_path }}"
        register: app_tier_dir

      - name: Installer les dépendances de l'application
        ansible.builtin.shell: |
          cd {{ app_tier_path }}
          npm install --production
        when: app_tier_dir.stat.exists

      - name: Create app environment file
        copy:
          content: |
            DB_HOST={{ database_endpoint }}
            DB_NAME={{ database_name }}
            DB_USER={{ database_user }}
            DB_PASSWORD={{ database_password }}
            PORT=4000
          dest: "{{ app_tier_path }}/.env"
          owner: appuser
          group: appuser
          mode: '0644'

      - name: Arrêter les anciens processus PM2
        ansible.builtin.shell: pm2 kill
        ignore_errors: yes
        become_user: appuser

      - name: Démarrer l'application avec PM2
        ansible.builtin.shell: |
          cd {{ app_tier_path }}
          pm2 start index.js --name "three-tier-app"
          pm2 save
        become_user: appuser
        when: app_tier_dir.stat.exists

      - name: Configurer PM2 au démarrage
        ansible.builtin.shell: |
          pm2 startup
          pm2 save
        ignore_errors: yes

      when: "'app' in group_names"

  handlers:
    - name: restart nginx
      ansible.builtin.service:
        name: nginx
        state: restarted
